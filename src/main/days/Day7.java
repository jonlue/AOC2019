package main.days;

import main.AOCRiddle;
import main.util.IntCodeComputer;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Day7 extends AOCRiddle {
    public Day7(String in, int part) {
        super(in, part);
        init();
    }

    private IntCodeComputer AMP_A;
    private IntCodeComputer AMP_B;
    private IntCodeComputer AMP_C;
    private IntCodeComputer AMP_D;
    private IntCodeComputer AMP_E;

    @Override
    protected String solve1() {
        return String.valueOf(run(false));
    }

    @Override
    protected String solve2() {
        return String.valueOf(run(true));
    }


    private long run(boolean part2){
        long max = Integer.MIN_VALUE;
        List<Integer[]> modes = getModes(part2);
        for(Integer[] mode : modes){
            reset();
            AMP_A.addInput(mode[0]);
            AMP_B.addInput(mode[1]);
            AMP_C.addInput(mode[2]);
            AMP_D.addInput(mode[3]);
            AMP_E.addInput(mode[4]);

            AMP_A.addInput(0);

            long outIn;
            do{
                outIn = AMP_A.run(true);
                AMP_B.addInput(outIn);
                outIn = AMP_B.run(true);
                AMP_C.addInput(outIn);
                outIn = AMP_C.run(true);
                AMP_D.addInput(outIn);
                outIn = AMP_D.run(true);
                AMP_E.addInput(outIn);
                outIn = AMP_E.run(true);
                AMP_A.addInput(outIn);
            }while(part2 && AMP_E.getStatus() != 99);
            max = Math.max(max,outIn);
        }
        return max;
    }

    private void reset() {
        AMP_A.resetInstructions();
        AMP_B.resetInstructions();
        AMP_C.resetInstructions();
        AMP_D.resetInstructions();
        AMP_E.resetInstructions();
    }

    private List<Integer[]> getModes(boolean part2) {
        Integer[][] types;
        if(!part2){
            types = new Integer[][]{{0, 1, 2, 3, 4}, {0, 1, 2, 4, 3}, {0, 1, 3, 2, 4}, {0, 1, 3, 4, 2}, {0, 1, 4, 2, 3}, {0, 1, 4, 3, 2}, {0, 2, 1, 3, 4}, {0, 2, 1, 4, 3}, {0, 2, 3, 1, 4}, {0, 2, 3, 4, 1}, {0, 2, 4, 1, 3}, {0, 2, 4, 3, 1}, {0, 3, 1, 2, 4}, {0, 3, 1, 4, 2}, {0, 3, 2, 1, 4}, {0, 3, 2, 4, 1}, {0, 3, 4, 1, 2}, {0, 3, 4, 2, 1}, {0, 4, 1, 2, 3}, {0, 4, 1, 3, 2}, {0, 4, 2, 1, 3}, {0, 4, 2, 3, 1}, {0, 4, 3, 1, 2}, {0, 4, 3, 2, 1}, {1, 0, 2, 3, 4}, {1, 0, 2, 4, 3}, {1, 0, 3, 2, 4}, {1, 0, 3, 4, 2}, {1, 0, 4, 2, 3}, {1, 0, 4, 3, 2}, {1, 2, 0, 3, 4}, {1, 2, 0, 4, 3}, {1, 2, 3, 0, 4}, {1, 2, 3, 4, 0}, {1, 2, 4, 0, 3}, {1, 2, 4, 3, 0}, {1, 3, 0, 2, 4}, {1, 3, 0, 4, 2}, {1, 3, 2, 0, 4}, {1, 3, 2, 4, 0}, {1, 3, 4, 0, 2}, {1, 3, 4, 2, 0}, {1, 4, 0, 2, 3}, {1, 4, 0, 3, 2}, {1, 4, 2, 0, 3}, {1, 4, 2, 3, 0}, {1, 4, 3, 0, 2}, {1, 4, 3, 2, 0}, {2, 0, 1, 3, 4}, {2, 0, 1, 4, 3}, {2, 0, 3, 1, 4}, {2, 0, 3, 4, 1}, {2, 0, 4, 1, 3}, {2, 0, 4, 3, 1}, {2, 1, 0, 3, 4}, {2, 1, 0, 4, 3}, {2, 1, 3, 0, 4}, {2, 1, 3, 4, 0}, {2, 1, 4, 0, 3}, {2, 1, 4, 3, 0}, {2, 3, 0, 1, 4}, {2, 3, 0, 4, 1}, {2, 3, 1, 0, 4}, {2, 3, 1, 4, 0}, {2, 3, 4, 0, 1}, {2, 3, 4, 1, 0}, {2, 4, 0, 1, 3}, {2, 4, 0, 3, 1}, {2, 4, 1, 0, 3}, {2, 4, 1, 3, 0}, {2, 4, 3, 0, 1}, {2, 4, 3, 1, 0}, {3, 0, 1, 2, 4}, {3, 0, 1, 4, 2}, {3, 0, 2, 1, 4}, {3, 0, 2, 4, 1}, {3, 0, 4, 1, 2}, {3, 0, 4, 2, 1}, {3, 1, 0, 2, 4}, {3, 1, 0, 4, 2}, {3, 1, 2, 0, 4}, {3, 1, 2, 4, 0}, {3, 1, 4, 0, 2}, {3, 1, 4, 2, 0}, {3, 2, 0, 1, 4}, {3, 2, 0, 4, 1}, {3, 2, 1, 0, 4}, {3, 2, 1, 4, 0}, {3, 2, 4, 0, 1}, {3, 2, 4, 1, 0}, {3, 4, 0, 1, 2}, {3, 4, 0, 2, 1}, {3, 4, 1, 0, 2}, {3, 4, 1, 2, 0}, {3, 4, 2, 0, 1}, {3, 4, 2, 1, 0}, {4, 0, 1, 2, 3}, {4, 0, 1, 3, 2}, {4, 0, 2, 1, 3}, {4, 0, 2, 3, 1}, {4, 0, 3, 1, 2}, {4, 0, 3, 2, 1}, {4, 1, 0, 2, 3}, {4, 1, 0, 3, 2}, {4, 1, 2, 0, 3}, {4, 1, 2, 3, 0}, {4, 1, 3, 0, 2}, {4, 1, 3, 2, 0}, {4, 2, 0, 1, 3}, {4, 2, 0, 3, 1}, {4, 2, 1, 0, 3}, {4, 2, 1, 3, 0}, {4, 2, 3, 0, 1}, {4, 2, 3, 1, 0}, {4, 3, 0, 1, 2}, {4, 3, 0, 2, 1}, {4, 3, 1, 0, 2}, {4, 3, 1, 2, 0}, {4, 3, 2, 0, 1}, {4, 3, 2, 1, 0}};
        }else{
            types = new Integer[][]{{9,8,7,6,5},{9,8,7,5,6},{9,8,6,7,5},{9,8,6,5,7},{9,8,5,7,6},{9,8,5,6,7},{9,7,8,6,5},{9,7,8,5,6},{9,7,6,8,5},{9,7,6,5,8},{9,7,5,8,6},{9,7,5,6,8},{9,6,8,7,5},{9,6,8,5,7},{9,6,7,8,5},{9,6,7,5,8},{9,6,5,8,7},{9,6,5,7,8},{9,5,8,7,6},{9,5,8,6,7},{9,5,7,8,6},{9,5,7,6,8},{9,5,6,8,7},{9,5,6,7,8},{8,9,7,6,5},{8,9,7,5,6},{8,9,6,7,5},{8,9,6,5,7},{8,9,5,7,6},{8,9,5,6,7},{8,7,9,6,5},{8,7,9,5,6},{8,7,6,9,5},{8,7,6,5,9},{8,7,5,9,6},{8,7,5,6,9},{8,6,9,7,5},{8,6,9,5,7},{8,6,7,9,5},{8,6,7,5,9},{8,6,5,9,7},{8,6,5,7,9},{8,5,9,7,6},{8,5,9,6,7},{8,5,7,9,6},{8,5,7,6,9},{8,5,6,9,7},{8,5,6,7,9},{7,9,8,6,5},{7,9,8,5,6},{7,9,6,8,5},{7,9,6,5,8},{7,9,5,8,6},{7,9,5,6,8},{7,8,9,6,5},{7,8,9,5,6},{7,8,6,9,5},{7,8,6,5,9},{7,8,5,9,6},{7,8,5,6,9},{7,6,9,8,5},{7,6,9,5,8},{7,6,8,9,5},{7,6,8,5,9},{7,6,5,9,8},{7,6,5,8,9},{7,5,9,8,6},{7,5,9,6,8},{7,5,8,9,6},{7,5,8,6,9},{7,5,6,9,8},{7,5,6,8,9},{6,9,8,7,5},{6,9,8,5,7},{6,9,7,8,5},{6,9,7,5,8},{6,9,5,8,7},{6,9,5,7,8},{6,8,9,7,5},{6,8,9,5,7},{6,8,7,9,5},{6,8,7,5,9},{6,8,5,9,7},{6,8,5,7,9},{6,7,9,8,5},{6,7,9,5,8},{6,7,8,9,5},{6,7,8,5,9},{6,7,5,9,8},{6,7,5,8,9},{6,5,9,8,7},{6,5,9,7,8},{6,5,8,9,7},{6,5,8,7,9},{6,5,7,9,8},{6,5,7,8,9},{5,9,8,7,6},{5,9,8,6,7},{5,9,7,8,6},{5,9,7,6,8},{5,9,6,8,7},{5,9,6,7,8},{5,8,9,7,6},{5,8,9,6,7},{5,8,7,9,6},{5,8,7,6,9},{5,8,6,9,7},{5,8,6,7,9},{5,7,9,8,6},{5,7,9,6,8},{5,7,8,9,6},{5,7,8,6,9},{5,7,6,9,8},{5,7,6,8,9},{5,6,9,8,7},{5,6,9,7,8},{5,6,8,9,7},{5,6,8,7,9},{5,6,7,9,8},{5,6,7,8,9}};
        }
        return new ArrayList<>(Arrays.asList(types));
    }

    private void init() {
        String in = getInput();
        AMP_A = new IntCodeComputer(in);
        AMP_B = new IntCodeComputer(in);
        AMP_C = new IntCodeComputer(in);
        AMP_D = new IntCodeComputer(in);
        AMP_E = new IntCodeComputer(in);
    }
}
